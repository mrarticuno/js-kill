// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Event         Event[]
    Function      Function[]
}

model Environment {
    id        Int      @id @default(autoincrement())
    name      String
    version   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Function Function[]

    @@index([name])
}

model Event {
    id           Int      @id @default(autoincrement())
    name         String
    cron         String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    executedById String   @map("createdById")
    executedBy   User?    @relation(fields: [executedById], references: [id])

    // Relationship with Function (many-to-many)
    functions EventFunction[]

    // Self-referential relationship for event dependencies
    dependentEvents Event[] @relation("EventDependencies")
    dependencies    Event[] @relation("EventDependencies")

    Execution Execution[]

    @@index([name])
    @@map(name: "events")
}

model Function {
    id            Int         @id @default(autoincrement())
    name          String
    code          String
    timeout       Int
    callback      String?
    active        Boolean     @default(true)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    createdById   String
    environmentId Int
    createdBy     User        @relation(fields: [createdById], references: [id])
    environment   Environment @relation(fields: [environmentId], references: [id])

    Execution Execution[]

    // Relationship with Event (many-to-many)
    events EventFunction[]

    @@index([name])
    @@map(name: "functions")
}

// Join model for many-to-many relationship between Event and Function
model EventFunction {
    id         Int @id @default(autoincrement())
    eventId    Int
    functionId Int

    event    Event    @relation(fields: [eventId], references: [id])
    function Function @relation(fields: [functionId], references: [id])

    @@unique([eventId, functionId])
    @@map(name: "event_functions")
}

model Execution {
    id        Int      @id @default(autoincrement())
    context   String?
    log       String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Function   Function @relation(fields: [functionId], references: [id])
    functionId Int

    Event   Event @relation(fields: [eventId], references: [id])
    eventId Int

    // Trigger the execution again
    ReRun       Execution[] @relation("ExecutionToExecution")
    Execution   Execution?  @relation("ExecutionToExecution", fields: [executionId], references: [id])
    executionId Int?

    @@index([createdAt])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
